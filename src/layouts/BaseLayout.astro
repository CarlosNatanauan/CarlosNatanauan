---
import "../styles/global.css";
import BackToTop from "../components/BackToTop.astro"; // 👈 import here

const { title = "Carlos Benedict Natanauan — Portfolio" } = Astro.props;
---

<html lang="en" class="scroll-smooth">
  <head>
    <!-- Set theme deterministically before first paint -->
<script is:inline>
  (function () {
    const stored = localStorage.getItem("theme"); // 'dark' | 'light' | null
    const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
    const isDark = stored ? stored === "dark" : prefersDark;

    const root = document.documentElement;
    root.classList.toggle("dark", isDark);
    root.style.colorScheme = isDark ? "dark" : "light";
  })();
</script>


    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="theme-color" content="#ffffff" media="(prefers-color-scheme: light)" />
    <meta name="theme-color" content="#0a0a0a" media="(prefers-color-scheme: dark)" />
    <title>{title}</title>
  </head>

  <body class="bg-white text-slate-900 selection:bg-indigo-200
               dark:bg-zinc-950 dark:text-zinc-100 dark:selection:bg-indigo-900">
    <header class="sticky top-0 z-10 backdrop-blur bg-white/70 dark:bg-zinc-950/70 
                   border-b border-slate-200 dark:border-zinc-800">
      <nav class="max-w-6xl mx-auto px-6 h-14 flex items-center justify-between">
        <a href="/" class="font-semibold hover:text-indigo-600 dark:hover:text-indigo-400">Kuya Carlos</a>
        <div class="flex items-center gap-4">
          <ul class="hidden md:flex gap-6 text-sm">
            <li><a class="hover:text-indigo-600 dark:hover:text-indigo-400" href="#projects">Projects</a></li>
            <li><a class="hover:text-indigo-600 dark:hover:text-indigo-400" href="#experience">Experience</a></li>
            <li><a class="hover:text-indigo-600 dark:hover:text-indigo-400" href="#contact">Contact</a></li>
          </ul>

          <!-- Dark Mode Toggle Button -->
<button
  id="theme-toggle-btn"
  type="button"
  class="rounded-xl border px-3 py-1 text-sm
         hover:bg-slate-100 dark:hover:bg-zinc-800
         border-slate-300 dark:border-zinc-700 transition-colors
         inline-flex items-center gap-2"
  aria-label="Toggle dark mode"
  aria-pressed="false"
>
  <span id="label-dark">🌙 Dark</span>
  <span id="label-light" class="hidden">☀️ Light</span>
</button>

        </div>
      </nav>
    </header>

    <main class="max-w-6xl mx-auto px-6">
      <slot />
    </main>

    <footer class="border-t border-slate-200 dark:border-zinc-800 mt-16">
      <div class="max-w-6xl mx-auto px-6 py-8 text-sm text-slate-600 dark:text-zinc-400">
        © {new Date().getFullYear()} Carlos Benedict Natanauan
      </div>
    </footer>

    <!-- Dark Mode Toggle Script -->
<script is:inline>
  (function () {
    let controller;

    function setUI(isDark) {
      const btn = document.getElementById("theme-toggle-btn");
      if (!btn) return;
      btn.setAttribute("aria-pressed", isDark ? "true" : "false");

      // Flip the two labels manually (no Tailwind dark: dependency)
      const on = document.getElementById("label-light"); // shows when dark is ON
      const off = document.getElementById("label-dark"); // shows when dark is OFF
      if (on && off) {
        if (isDark) {
          on.classList.remove("hidden");
          off.classList.add("hidden");
        } else {
          on.classList.add("hidden");
          off.classList.remove("hidden");
        }
      }
    }

    function setTheme(isDark) {
      const root = document.documentElement;
      root.classList.toggle("dark", isDark);
      root.style.colorScheme = isDark ? "dark" : "light";
      localStorage.setItem("theme", isDark ? "dark" : "light");
      setUI(isDark);
    }

    function bind() {
      const btn = document.getElementById("theme-toggle-btn");
      if (!btn) return;

      controller?.abort();
      controller = new AbortController();

      // Initialize from current DOM state set by the head script
      setUI(document.documentElement.classList.contains("dark"));

      btn.addEventListener(
        "click",
        () => setTheme(!document.documentElement.classList.contains("dark")),
        { signal: controller.signal, passive: true }
      );
    }

    bind();
    addEventListener("astro:page-load", bind); // re-bind after client-side navigations
  })();
</script>

  <BackToTop threshold={200} />

  </body>
</html>
